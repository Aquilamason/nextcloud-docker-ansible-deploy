---

# Defaults

- name: Set postgres_start_wait_time, if not provided
  set_fact:
    postgres_start_wait_time: 15
  when: "postgres_start_wait_time|default('') == ''"

- name: Set postgres_vacuum_wait_time, if not provided
  set_fact:
    postgres_vacuum_wait_time: "{{ 7 * 86400 }}"
  when: "postgres_vacuum_wait_time|default('') == ''"


# Actual vacuuming work

- name: Ensure nextcloud-postgres is started
  service:
    name: nextcloud-postgres
    state: started
    daemon_reload: yes

- name: Wait a bit, so that Postgres can start
  wait_for:
    timeout: "{{ postgres_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- import_tasks: tasks/util/detect_existing_postgres_version.yml

- name: Abort, if no existing Postgres version detected
  fail:
    msg: "Could not find existing Postgres installation"
  when: "not nextcloud_postgres_detected_existing|bool"

- name: Generate Postgres database vacuum command
  set_fact:
    nextcloud_postgres_vacuum_command: >-
      {{ nextcloud_host_command_docker }} run --rm --name nextcloud-postgres-synapse-vacuum
      --user={{ nextcloud_user_uid }}:{{ nextcloud_user_gid }}
      --cap-drop=ALL
      --network={{ nextcloud_docker_network }}
      --env-file={{ nextcloud_environment_variables_data_path }}/env-postgres-pgsql-docker
      {{ nextcloud_postgres_docker_image_latest }}
      psql -v ON_ERROR_STOP=1 -h nextcloud-postgres {{ nextcloud_postgres_db_name }} -c 'VACUUM FULL VERBOSE'

- name: Note about Postgres vacuum alternative
  debug:
    msg: >-
      Running vacuum with the following Postgres command: `{{ nextcloud_postgres_vacuum_command }}`.
      If this crashes, you can stop all processes (`systemctl stop nextcloud-*`),
      start Postgres only (`systemctl start nextcloud-postgres`)
      and manually run the above command directly on the server.

- name: Populate service facts
  service_facts:

- set_fact:
    nextcloud_postgres_nextcloud_was_running: "{{ ansible_facts.services['nextcloud-apache.service']|default(none) is not none and ansible_facts.services['nextcloud-apache.service'].state == 'running' }}"

- name: Ensure nextcloud-apache is stopped
  service:
    name: nextcloud-apache
    state: stopped
    daemon_reload: yes

- name: Run Postgres vacuum command
  command: "{{ nextcloud_postgres_vacuum_command }}"
  async: "{{ postgres_vacuum_wait_time }}"
  poll: 10
  register: nextcloud_postgres_synapse_vacuum_result

# Intentionally show the results
- debug: var="nextcloud_postgres_synapse_vacuum_result"

- name: Ensure nextcloud-apache is started, if it previously was
  service:
    name: nextcloud-apache
    state: started
    daemon_reload: yes
  when: "nextcloud_postgres_nextcloud_was_running|bool"
